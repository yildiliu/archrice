#!/bin/bash

source $HOME/scripts/my_fzffunctions
source $HOME/scripts/my_android_ssh
source $HOME/scripts/my_mtpfs_commands
source $HOME/scripts/my_network
source $HOME/scripts/my_mixed
source $HOME/scripts/my_tmux-mixed
source $HOME/scripts/my_khal
source $HOME/scripts/my_youtubedl


function my_find-delete-recursively() {

find . -name "*.$1" -type f

read -p "Are you sure? " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
				echo 
				echo "find . -name "*.$1" -type f -delete"
fi
}

function my_iw-disable-powersave-option-of-interface() {

sudo iw dev $1 set power_save off

}


function my_find-show-broken-links() {

find -xtype l -exec ls -l {} \;

}

function my_find-remove-broken-links() {

find . -xtype l -delete

}


function my_smartctl-get-total-usage-of-disk() {

sudo smartctl -a $1 | grep Power

}

# get the calendar week number for a specific date

my_date-get-week-number() {

date --date="$1" +"%V"

}

# 90Â° counterclockwise
alias my_scrcpy-horizontal="scrcpy --lock-video-orientation 1"   

# mount zip

function my_fusezip-mount() {

# fuse-zip [zip-file} [mountpoint]
fuse-zip -r $1 $2

}

function my_fusermount-unmount() {

fusermount -u $1

}

alias my_dhcpcd-edit-config="sudo vim /etc/dhcpcd.conf"

alias my_ip-address-show="ip address show"

function my_ip-addr-flush() {

# $1: interface

sudo ip addr flush dev $1

}

function my_zip-folder-recursively() {

# $1: zip name
# $2: folder to be zipped

zip -r $1 $2

}

function my_fuser-identify-processes-using-mounted-dev() {

# $1: mountpoint
fuser -mv $1

}


function my_sr() {

my_selector

}

# show all commands and functions whose prefix is 'my_' or 'myp_'
function my_selector() {

local choice=$( cat $HOME/.my_custom-functions |fzf)

type $choice
# save command in tmux buffer
# TODO: check if user is in tmux session
echo -n $choice | tmux load-buffer -b buffer-mycommand -

}

function my_get-custom-functions(){

local choice=$({ compgen -A function; compgen -A command; } | grep '^my_\|^myp_' | sort --unique )
echo "$choice"

}

function my_update-custom-functions() {

my_get-custom-functions > $HOME/.my_custom-functions

}


function my_pandoc-md-to-docx() {

pandoc -o $1.docx -f markdown -t docx $1.md

}

function my_pandoc-md-to-pdf() {

pandoc -o $1.pdf -f markdown -t pdf $1.md

}

function my_generate-random-string-with-following-length() {

< /dev/urandom tr -dc A-Za-z0-9_ | head -c$1

}

function my_grep-find-string-in-files(){

# -r or -R is recursive,
# -n is line number, and
# -w stands for match the whole word.

# $1: search only in files with specific extension. Example: py
# $2: /path/to/somewhere/
# $3: pattern

grep --include=\*.$1 -rnw "$2" -e "$3"

}

function my_grep-find-string-all-files() {

# -r or -R is recursive,
# -n is line number, and
# -w stands for match the whole word.
# -l (lower-case L) can be added to just give the file name of matching files.

grep -rnw "$1" -e "$2"

}

function my_ack-find-string-in-all-files() {

ack $1

}

function my_realpath-get-path-to-file() {

realpath $1

}

function my_readlink-get-path-to-file() {

readlink -f $1

}

function my_pdfarranger-arrange-document() {

pdfarranger

}

function my_ncdu-show-used-space-for-each-directory() {

ncdu

}

function my_du-show-used-space-for-each-directory() {

sudo du -sh *

}

function my_df-show-disk-usage-for-all-disks() {

df -h

}

function my_df-show-disk-usage-for-specific-partition() {

# $1: the name of the folder to which the partition was mounted
df -h $1

}

function my_light-set-light() {

echo "Current brightness: $(light -G)"
echo -n "New value: "
read REPLY
light -S $REPLY

}

 
# generate tags file in .git folder
function my_ctags-index-current-directory() {
ctags -R .
}

